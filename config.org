#+PROPERTY: header-args :results silent
#+begin_src emacs-lisp :tangle yes
;; -*- lexical-binding: t -*-
#+end_src

* Who am I?
#+begin_src emacs-lisp :tangle yes
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "Francis Chan"
      user-mail-address "jackychany321@gmail.com")
#+end_src

* UI/Look
** Fonts
#+begin_src emacs-lisp :tangle yes
;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;; (setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
;;       doom-variable-pitch-font (font-spec :family "sans" :size 13))
(setq
 doom-font (font-spec :family "Sarasa Mono HC" :size 12 :weight 'medium)
 doom-variable-pitch-font (font-spec :family "Sarasa UI HC" :size 12 :weight 'medium))
#+end_src
** Nerd
#+begin_src emacs-lisp :tangle yes
(after! nerd-icons (setq! nerd-icons-font-names '("SymbolsNerdFontMono-Regular.ttf")))
#+end_src

** Theme
#+begin_src emacs-lisp :tangle yes
;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-nord)
#+end_src

** No Dashboard Banner
#+begin_src elisp :tangle yes
(setq! +doom-dashboard-ascii-banner-fn #'(lambda ()))
(setq! +doom-dashboard-menu-sections '())
#+end_src
** hl-todo
#+begin_src emacs-lisp :tangle yes
;; TEMP keywords
(after! hl-todo (pushnew! hl-todo-keyword-faces '("TEMP" 'warning 'bold)))
#+end_src

** Pass
#+begin_src elisp :tangle yes
(after! pass (setq! pass-show-keybindings nil))
#+end_src
** Others
#+begin_src emacs-lisp :tangle yes
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)

;; Delete duplicated history
(setq history-delete-duplicates t)

;; fullscreen on startup
(add-to-list 'initial-frame-alist '(fullscreen . maximized))

;; tranparency NOTE It makes the text transparent too
;; (set-frame-parameter (selected-frame) 'alpha '(100 85))
;; (add-to-list 'default-frame-alist '(alpha 100 10))

(setq tab-width 4)

(setq! enable-local-variables t)

(setq! scroll-lock-mode t)
#+end_src
* Org Directory
#+begin_src emacs-lisp :tangle yes
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(setq! org-directory "~/org")
#+end_src

* Scratch Buffer Use Org Mode
#+begin_src emacs-lisp :tangle yes
;; scratch buffer default `org-mode'
(setq! doom-scratch-initial-major-mode 'org-mode)
#+end_src
* Org
** Archive Location
#+begin_src emacs-lisp :tangle yes
(after! org (setq! org-archive-location "archive/%s_archive::"))
#+end_src
** Simple Org Configs
- ref :: https://explog.in/notes/writingsetup.html
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq! org-hide-emphasis-markers t
         ;; org-adapt-indentation nil
         ;; org-indent-indentation-per-level 1
         org-complete-tags-always-offer-all-agenda-tags t
         org-log-into-drawer t
         org-log-reschedule "note"
         org-log-redeadline "note"))
#+end_src

** Priority
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq! org-priority-default 67
         org-priority-lowest 69
         org-priority-faces '((65 . error) (66 . warning) (67 . warning) (68 . success) (69 . success))))
;; org-priority-faces
#+end_src

** Todo Keywords Faces
#+begin_src emacs-lisp :tangle yes
(after! org (pushnew! org-todo-keyword-faces '("INBOX" org-todo)))
#+end_src

** Org Babel Edit's LSP Support
*** fanshi/org-babel-edit-lsp-langs
#+begin_src emacs-lisp :tangle yes
(defvar fanshi/org-babel-edit-lsp-langs '(("haskell" . "hs") ("typescript" . "ts") ("js" . "js") ("python" . "py") ("rust" . "rs"))
  "alist for langs that will use lsp when `org-edit-special', key is the lang, and value is lang's file extension")
#+end_src
*** fanshi/org-babel-edit-lsp-prep
- ref :: https://github.com/emacs-lsp/lsp-mode/issues/2842#issuecomment-870807018
#+begin_src emacs-lisp :tangle yes
(defmacro fanshi/org-babel-edit-lsp-prep (lang ext)
  `(defun ,(intern (concat "org-babel-edit-prep:" lang))  (babel-info)
     "prep for `org-edit-special' using lsp for some lang"
     (let* ((tmp-src-file (org-babel-temp-file ,(concat lang "-src-edit-") ,(concat "." ext))))
       (with-temp-file tmp-src-file (insert (cadr babel-info)))
       (setq-local buffer-file-name tmp-src-file)
       (lsp)
       ;; NOTE: when lookup doc using lsp, it use pop-up.
       ;; NOTE: when we kill the popped up look-up, whole edit session gone because it was a pop-up
       ;; NOTE: so change the window to non-pop up, and window it more convenient than pop than code editing too.
       ;; FIXME: use set-popup-rule! ?
       (+popup/raise (selected-window)))
     ))
#+end_src
*** provide the support
#+begin_src emacs-lisp :tangle yes
;; NOTE: defun org-babel-edit-prep:lang for each lang in `fanshi/org-babel-edit-lsp-langs'
(mapc (lambda (x) (eval `(fanshi/org-babel-edit-lsp-prep ,(car x) ,(cdr x)))) fanshi/org-babel-edit-lsp-langs)

;; NOTE: in `fanshi/org-babel-edit-lsp-prep', the `org-edit-special' pop-up it promoted, and after `org-edit-src-exit', we got one duplicate pop-up shaped window.
;; NOTE: this advice automatically delete that window for better ux
(advice-add 'org-edit-src-exit :around (lambda (f &rest args)
                                         (if-let* ((babel-info org-src--babel-info)
                                                   (lang (car babel-info))
                                                   (babel-lsp-lang (assoc lang fanshi/org-babel-edit-lsp-langs)))
                                             (progn (apply f args) (evil-window-delete))
                                           (apply f args))))
#+end_src
** Templates
*** Remove Unwanted
#+begin_src emacs-lisp :tangle yes
(after! org-capture
  (setq! org-capture-templates
         (seq-filter
          (lambda (x)
            (and
             (not (string= "t" (car x)))
             (not (string= "j" (car x)))
             (not (string= "n" (car x)))))
          org-capture-templates)))
#+end_src

*** Add Mine
**** Sudden clocked Tasks
#+begin_src emacs-lisp :tangle yes
(after! org-capture
  (pushnew! org-capture-templates
            `("cr" "sudden link to read with clock" entry (file+olp "read.org" "Link")
              ,(string-join
                '("* READING %(org-web-tools--org-link-for-url)"
                  " %i%?"
                  "")
                "\n")
              :clock-in t :clock-keep t :immediate-finish t)
            `("ct" "sudden task with clock" entry (file+olp "fanshi.org.gpg" "Tasks")
              ,(string-join
                '("* TODO %^{Title}"
                  " %i%?"
                  "")
                "\n")
              :clock-in t :clock-keep t :immediate-finish t)
            '("c" "start clock for")))
#+end_src

**** Link Instant Capture
#+begin_src emacs-lisp :tangle yes
(after! org-capture
  (pushnew! org-capture-templates
            `("l" "link" entry (file "inbox.org")
              ,(string-join
                '("* INBOX %(org-web-tools--org-link-for-url)"
                  ":PROPERTIES:"
                  ":CREATED: %U"
                  ":END:"
                  " %a")
                "\n")
              :immediate-finish t)))
#+end_src
**** Inbox
#+begin_src emacs-lisp :tangle yes
(after! org-capture
  (pushnew! org-capture-templates
            `("i" "inbox" entry (file "inbox.org")
              ,(string-join
                '("* INBOX %^{heading}"
                  ":PROPERTIES:"
                  ":CREATED: %U"
                  ":END:"
                  " %i%?"
                  " %a")
                "\n"))))
#+end_src

** Autorefile from inbox at todo keywords change
*** fanshi/org-inbox-todo-trigger
#+begin_src emacs-lisp :tangle yes
(after! org
  (defun fanshi/org-inbox-todo-trigger (change-plist) ""
         (when (equal (plist-get change-plist :type) 'todo-state-change)
           (let ((org-refile-targets
                  (pcase (plist-get change-plist :from)
                    ("INBOX" (pcase (plist-get change-plist :to)
                               ("PROJ" `((,(mapcar
                                            (lambda (y) (funcall #'concat org-directory y))
                                            '("/projects.org.gpg"))
                                          . (:level . 1))))
                               ("TODO"  `((,(mapcar
                                             (lambda (y) (funcall #'concat org-directory y))
                                             '("/projects.org.gpg"))
                                           . (:level . 2))))
                               ("[ ]" `((,(mapcar
                                           (lambda (y) (funcall #'concat org-directory y))
                                           '("/projects.org.gpg"))
                                         . (:todo . "PROJ"))))
                               (_ org-refile-targets)))
                    (_ nil))))
             (when org-refile-targets (org-refile))))))
#+end_src

*** hook
#+begin_src emacs-lisp :tangle yes
(after! org (setq! org-trigger-hook 'fanshi/org-inbox-todo-trigger))
;; org-refile-allow-creating-parent-nodes "confirm"
#+end_src

** Noter
#+begin_src emacs-lisp :tangle yes
(after! org-noter
  ;; (defun fanshi/noter-capture-note ()
  ;;   (interactive)
  ;;   (call-interactively #'org-noter-insert-precise-note)
  ;;   (insert "#+ATTR_ORG: :width 500 ")
  ;;   (call-interactively #'org-download-screenshot)
  ;;   )
  (setq! org-noter-notes-search-path (list (concat org-roam-directory "books/"))
         org-noter-doc-split-fraction '(0.57 0.43)))
#+end_src

** Agenda
*** fanshi/make-line
#+begin_src emacs-lisp :tangle yes
(defun fanshi/make-line () "" (concat "\n" (make-string (window-width) 9472)))
#+end_src

*** Org-Agenda
**** Clock
#+begin_src emacs-lisp :tangle yes
(after! org-agenda
  (setq!
   org-agenda-files '("~/org/")
   org-clock-report-include-clocking-task t
   org-agenda-clockreport-parameter-plist (quote (:link t :maxlevel 4 :fileskip0 t :compact t :narrow 80))))
#+end_src

**** Agenda Tweak
#+begin_src emacs-lisp :tangle yes
(after! org-agenda
  (setq! org-agenda-block-separator 9472
         org-agenda-compact-blocks t
         org-agenda-breadcrumbs-separator " / "
         org-agenda-span 'day
         org-agenda-start-day nil
         org-agenda-start-on-weekday nil
         org-deadline-warning-days 30
         org-agenda-current-time-string "⬲ NOW -- NOW --"
         org-agenda-prefix-format '(;; (agenda . " %-3i %18s  %?-12t %-25b ")
                                    ;; (agenda . " %-3i %-44b %?18s %?-12t")
                                    ;; (agenda . " %-3i %-44b %?-18s %?-12t")
                                    (agenda . " %-3i %-44b %11s %?-12t")
                                    ;; (todo . " %-3i                     ")
                                    (todo . " %-3i %-44b %?-12t")
                                    (tags . " %i %-12:c")
                                    (search . " %i %-12:c"))
         org-agenda-format-date (lambda (date) (concat (fanshi/make-line) "\n" (org-agenda-format-date-aligned date)))
         org-agenda-sorting-strategy '((agenda time-up habit-down priority-down category-keep)
                                      (todo priority-down category-keep)
                                      (tags priority-down category-keep)
                                      (search category-keep))))
#+end_src

**** Org Super Agenda
***** fanshi/agenda
#+begin_src emacs-lisp :tangle yes
(setq! fanshi/agenda
       '((:name "Clocked Today 📰📰📰" :log t)
         ;; (:name "Calendar 📅📅📅" :time-grid t :and (:scheduled today :not (:habit t) ))
         (:name "Calendar 📅📅📅" :time-grid t :and (:scheduled today))
         (:name "Deadlines Just Aren't Real To Me Until I'm Staring One In The Face 🚨🚨🚨" :deadline today :order 2)
         (:name "What Is Dead May Never Die 🚣🚣🚣" :deadline past :order 3)
         (:name "Defuse The Bomb 💣💣💣" :deadline future :order 4)
         (:name "Déjà Vu 🔁🔁🔁" :and (:habit t :todo ("TODO" "[ ]")) :order 5) ;; 🧟🧟🧟
         ;; (:name "Déjà Vu 🔁🔁🔁" :and (:habit t :todo ("TODO" "[ ]") :scheduled today) :order 5) ;; 🧟🧟🧟
         ;; (:name "Déjà vécu 🥶🥶🥶" :and (:habit t :todo ("TODO" "[ ]") :scheduled past) :order 6) ;; 🧟🧟🧟
         ;; (:name "Presque vu ⏩⏩⏩" :and (:habit t :todo ("TODO" "[ ]") :scheduled future) :order 7) ;; 🧟🧟🧟
         ;; (:name "Meetings"
         ;;  :and (:todo "MEETING" :scheduled future)
         ;;  :order 8)
         ))
#+end_src

***** fanshi/alltodo
#+begin_src emacs-lisp :tangle yes
(after! org
  (setq! fanshi/alltodo
         `((:discard (:scheduled future :deadline future :regexp ,org-scheduled-time-hour-regexp :todo "INBOX"))
           (:name "Important 💎💎💎" :tag "Payment" :priority "A" :order 2) ;;🚔🚔🚔
           ;; (:name "Do I really look like a guy with a plan??? 🃏🃏🃏" :and (:todo "TOPLAN" :priority> "D") :order 3)
           (:name "Do I really look like a guy with a plan??? 🃏🃏🃏" :todo "IDEA" :order 3)
           (:name "Camping 🏕🏕🏕" :todo "WAIT" :order 11) ; Set order of this section 💎💎💎
           ;; (:name "Inbox 📬📬📬" :todo "INBOX" :order 30)
           ;; (:name "Peek Into Future 🔮🔮🔮" :scheduled future :order 4)
           ;; (:name "Watching 📺📺📺" :and (:todo "READING" :tag "TV") :order 9)
           ;; (:name "こっちも見ろ 👁👁👁" :todo ("READING" "SCAN") :order 8)
           ;; (:name "Reading 📚📚📚" :todo ("READING" "SCAN") :order 10)
           (:name "Quick Picks 🚀🚀🚀" :and (:effort< "0:10" :todo "TODO") :order 4)
           ;; NOTE: tried to follow logic in org-habit-insert-consistency-graphs to find dying habit but seems not easy
           ;; (:name "Dying Habit" :and (:habit t
           ;;                      :todo ("TODO" "[ ]")
           ;;                      :not (:regexp ,org-scheduled-time-hour-regexp)) :order 5)))
           ;; (:name "Déjà Vu 🔁🔁🔁" :and (:habit t
           ;;                               :todo ("TODO" "[ ]")
           ;;                               :scheduled t
           ;;                               :not (:scheduled future))
           ;;                :order 6)
           ;; (:name "Super B 👶🏿👶🏿👶🏿" :and (:priority "B" :not (:file-path "projects")) :order 9)
           (:name "Super B 👶👶👶" :and (:priority "B" :not (:file-path "projects")) :order 7)
           ;; (:name "Others 🏝🏝🏝" :and (:priority "C" :not (:file-path "projects")) :order 21)
           ;; (:name "Optional 🧧🧧🧧" :and (:priority "C" :not (:file-path "projects")) :order 90)
           ;; (:name "waht 🧧🧧🧧" :todo "TOREAD" :order 90)
           ;; NOTE: check
           ;; (:name "Should Be Nothing"
           ;;  :not (:file-path "projects"
           ;;        :file-path "read"
           ;;        :file-path "idea")
           ;;  :order 99)
           ;; (:discard (:habit t))
           ;; NOTE Project
           (:discard (:not (:file-path "projects")))
           (:auto-outline-path t :order 5))))
#+end_src

***** fanshi/org-agenda-file-regexp (include GPG)
[[https://emacs.stackexchange.com/a/36543][org mode - Include .org.gpg files in org-agenda - Emacs Stack Exchange]]
#+begin_src emacs-lisp :tangle no
(after! org-agenda
  (setq! fanshi/org-agenda-file-regexp
         (replace-regexp-in-string "\\\\\\.org" "\\\\.org\\\\(\\\\.gpg\\\\)?" org-agenda-file-regexp)))
#+end_src

***** Use Org Super Agenda
#+begin_src emacs-lisp :tangle yes
(use-package! org-super-agenda
  :after org-agenda
  :init
  (setq org-agenda-show-log t
        ;; NOTE: https://github.com/alphapapa/org-super-agenda/issues/50
        org-super-agenda-header-map (make-sparse-keymap)
        ;; fanshi/org-agenda-header (concat "\n" (make-string (window-width) 9472))
        ;; fanshi/make-org-agenda-header (defun () (concat "\n" (make-string (window-width) 9472)))
        org-agenda-custom-commands '(("p" "Private Agenda"
                                      ((agenda "" ((org-super-agenda-groups fanshi/agenda)))
                                       (alltodo "" ((org-agenda-overriding-header (fanshi/make-line))
                                                    (org-super-agenda-groups fanshi/alltodo))))
                                      ""
                                      ((org-agenda-file-regexp fanshi/org-agenda-file-regexp)))))
  :config
  (org-super-agenda-mode))
#+end_src

** Web Tool
#+begin_src emacs-lisp :tangle yes
(use-package! org-web-tools
  ;; :after-call org-capture
  :commands (org-web-tools--org-link-for-url))
#+end_src

** Pomodoro
#+begin_src emacs-lisp :tangle yes
(after! org-pomodoro
  (setq! org-pomodoro-length 45
         org-pomodoro-short-break-length 5
         org-pomodoro-long-break-length 25))
#+end_src

* Projectile
#+begin_src emacs-lisp :tangle yes
(after! projectile
  (setq projectile-project-name-function (lambda (project-root)
                                           (let ((name (funcall 'projectile-default-project-name project-root)))
                                             (if (member name '("python" "haskell" "bootstrap" "clojure"))
                                                 (concat (funcall 'projectile-default-project-name (file-name-directory (directory-file-name project-root))) "/" name)
                                               name))))
  ;; NOTE: higher priority for haskell-cabal (than the nix-flake) for projectile project detection
  (if-let ((cabal-project (cl-find-if (lambda (project-type-record) (string= (car project-type-record) 'haskell-cabal)) projectile-project-types)))
             (setq! projectile-project-types (cons cabal-project  projectile-project-types))))
#+end_src
* Clone projects
** clonable project configs
#+begin_src emacs-lisp :tangle yes
(setq fanshi/clonable-project-types `(nix-flake python-poetry clojure-cli haskell-cabal))
;; NOTE: What file to clone for specify project type
;; `generic', the default.
(setq fanshi/project-files-to-copy/generic '(".envrc" ".gitignore"
                                             ;; NOTE: copy the .direnv cache to speed up direnv for the first time
                                             ".direnv" ))
;; `nix'.
(setq fanshi/project-files-to-copy/nix-flake  (append fanshi/project-files-to-copy/generic '("flake.lock" "flake.nix")))
;; I am using the `nix' with `python' and `clojure'.
(setq fanshi/project-files-to-copy/python-poetry (append fanshi/project-files-to-copy/nix-flake '("poetry.lock" "pyproject.toml")))
(setq fanshi/project-files-to-copy/clojure-cli (append  fanshi/project-files-to-copy/nix-flake '("deps-lock.json" "deps.edn")))
;; using haskell.nix for 'haskell'
(setq fanshi/project-files-to-copy/haskell-cabal (append  fanshi/project-files-to-copy/nix-flake '("nix" "*.cabal" )))
#+end_src

** fanshi/init-new-project
#+begin_src emacs-lisp :tangle yes
(defun fanshi/init-new-project (&optional dir)
  "Init a directory as a new project"
  (interactive)
  (let ((default-directory (expand-file-name (or dir default-directory))))
    ;; NOTE: init git repo
    (require 'magit)
    (magit-call-git "init" (magit-convert-filename-for-git default-directory))

    ;; NOTE: init commit
    (magit-gitignore-in-gitdir "/.envrc")
    (magit-gitignore-in-gitdir "/.direnv/")
    (magit-stage-modified t)
    (magit-call-git "commit" '("-m" "init"))

    ;; NOTE: to load the .envrc
    (require 'envrc)
    (envrc-allow)
    (+vterm/toggle nil)))
#+end_src

** fanshi/clone-from-project
#+begin_src emacs-lisp :tangle yes
(defun fanshi/clone-from-project (dir)
  "Clone the infrastructure of an existing project DIR to make a new project"
  (require 'projectile)
  (if-let ((project-type (projectile-project-type dir))
           (project-files-to-copy (symbol-value (intern-soft (concat "fanshi/project-files-to-copy/" (prin1-to-string project-type)))))
           (new-project-directory (file-name-as-directory (read-directory-name "Create new project at directory: "))))
      (progn
        ;; NOTE: make new directory
        (make-directory new-project-directory t)
        ;; NOTE: copy files
        (dolist (wildcards-or-file project-files-to-copy)
          (dolist (file (projectile-verify-file-wildcard wildcards-or-file dir))
                  (dired-copy-file file new-project-directory 1)))
        ;; NOTE: init project
        (fanshi/init-new-project new-project-directory)
        ;; NOTE: switch to the new project
        (projectile-switch-project-by-name new-project-directory))
    (user-error (concat "Unsupported project type to clones: " (prin1-to-string project) " + " (prin1-to-string project-type) " + " (prin1-to-string project-files-to-copy)))))
#+end_src
** fanshi/choose-and-clone-for-new-project
#+begin_src emacs-lisp :tangle yes
(defun fanshi/choose-and-clone-for-new-project ()
  "To choose an existing porject, and clone the infrastructure of it to make a new project"
  (interactive )
  (require 'projectile)
  (if-let ((project-type (completing-read "Project type to clone: " fanshi/clonable-project-types))
           (projects (cl-remove-if (lambda (p) (progn (message p) (not (string-equal project-type (projectile-project-type p)))))
                                    projectile-known-projects)))
      (projectile-completing-read "Clone project: " projects :action #'fanshi/clone-from-project)
    (user-error "There are no clonable projects")))
#+end_src

* Langs
** Haskell
*** Template
#+begin_src emacs-lisp :tangle yes
(after! haskell-mode
  (setq! haskell-auto-insert-module-format-string
         (concat haskell-auto-insert-module-format-string
                 "main :: IO ()\n"
                 "main = do\n"
                 "  putStrLn \"Surprise Motherfucker!\"")))
#+end_src

*** LSP
#+begin_src emacs-lisp :tangle yes
(after! lsp-haskell
  (setq! lsp-haskell-floskell-on nil)
  (setq! lsp-haskell-fourmolu-on nil)
  (setq! lsp-haskell-brittany-on nil)
  (setq! lsp-haskell-stylish-haskell-on nil))
#+end_src
*** Cabal
#+begin_src emacs-lisp :tangle yes
(after! (:and haskell-cabal format-all)
  (set-formatter! 'cabal-fmt "cabal-fmt" :modes 'haskell-cabal-mode)
  ;; NOTE TEMP: https://github.com/doomemacs/doomemacs/issues/6936
  (puthash 'cabal-fmt "cabal-fmt" format-all--executable-table))
#+end_src

** Typescript
- ref :: https://www.reddit.com/r/emacs/comments/b7rsxu/behold_orgbabelexecutetypescript/
#+begin_src emacs-lisp :tangle yes
(defun org-babel-execute:typescript (body params)
  "babel execute typescript"
  (let* ((tmp-ts-file (org-babel-temp-file "scripts" ".ts"))
         (tmp-js-file (concat (substring tmp-ts-file 0 -2) "js"))
         (strict (if (assq :strict params) "--strict " ""))
         (cmd (concat "tsc " strict (shell-quote-argument tmp-ts-file))))
    (with-temp-file tmp-ts-file (insert body))
    (with-temp-buffer
      (if (eq (call-process-shell-command cmd nil t) 0)
          (progn
            (insert-file-contents tmp-js-file)
            (if (assq :js params)
                (buffer-string)
              (require 'ob-js)
              (org-babel-execute:js (buffer-string) params)))
        (buffer-string)))))

;; NOTE when async
;; executing Typescript code block...
;; error in process sentinel: async-handle-result: Cannot open load file: No such file or directory, ob-typescript
;; maybe related? https://github.com/hlissner/doom-emacs/issues/2198
;; TEMP FIXME
(setq ob-async-no-async-languages-alist '("typescript"))
#+end_src

*** Org special edit's lsp support
#+begin_src emacs-lisp :tangle yes
;; NOTE: https://github.com/emacs-lsp/lsp-mode/issues/2842#issuecomment-870807018
(defmacro fanshi/org-babel-edit-lsp-prep (lang ext)
  `(defun ,(intern (concat "org-babel-edit-prep:" lang))  (babel-info)
     "prep for `org-edit-special' using lsp for some lang"
     (let* ((tmp-src-file (org-babel-temp-file ,(concat lang "-src-edit-") ,(concat "." ext))))
       (with-temp-file tmp-src-file (insert (cadr babel-info)))
       (setq-local buffer-file-name tmp-src-file)
       (lsp)
       ;; NOTE: when lookup doc using lsp, it use pop-up.
       ;; NOTE: when we kill the popped up look-up, whole edit session gone because it was a pop-up
       ;; NOTE: so change the window to non-pop up, and window it more convenient than pop than code editing too.
       ;; FIXME: use set-popup-rule! ?
       (+popup/raise (selected-window)))
     ))

(defvar fanshi/org-babel-edit-lsp-langs '(("haskell" . "hs") ("typescript" . "ts") ("js" . "js") ("python" . "py") ("rust" . "rs"))
  "alist for langs that will use lsp when `org-edit-special', key is the lang, and value is lang's file extension")

;; NOTE: defun org-babel-edit-prep:lang for each lang in `fanshi/org-babel-edit-lsp-langs'
(mapc (lambda (x) (eval `(fanshi/org-babel-edit-lsp-prep ,(car x) ,(cdr x)))) fanshi/org-babel-edit-lsp-langs)

;; NOTE: in `fanshi/org-babel-edit-lsp-prep', the `org-edit-special' pop-up it promoted, and after `org-edit-src-exit', we got one duplicate pop-up shaped window.
;; NOTE: this advice automatically delete that window for better ux
(advice-add 'org-edit-src-exit :around (lambda (f &rest args)
                                         (if-let* ((babel-info org-src--babel-info)
                                                   (lang (car babel-info))
                                                   (babel-lsp-lang (assoc lang fanshi/org-babel-edit-lsp-langs)))
                                             (progn (apply f args) (evil-window-delete))
                                           (apply f args))))
#+end_src
*** treesit
#+begin_src emacs-lisp :tangle yes
(after! treesit
  (setq treesit-language-source-alist
        '((typescript "https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src" nil nil)
          (tsx "https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src" nil nil)))
  )
(use-package typescript-ts-mode
  :mode (("\\.ts\\'" . typescript-ts-mode)
         ("\\.tsx\\'" . tsx-ts-mode))
  :config
  (add-hook! '(typescript-ts-mode-hook tsx-ts-mode-hook) #'lsp!))
#+end_src

** Python
#+begin_src emacs-lisp :tangle yes
;; NOTE: https://github.com/abo-abo/lispy/issues/509
(after! (lispy python lpy)
  (add-hook 'lpy-mode-hook (lambda () (progn
                                   (setq-local python-shell-completion-native-disabled-interpreters (append python-shell-completion-native-disabled-interpreters '("python3")))
                                   (setq-local completion-at-point-functions '(lsp-completion-at-point python-completion-at-point t))
                                   (let ((lispy-python-proc-name (concat "lispy-python-" (projectile-project-name))))
                                     (condition-case nil
                                         (lispy--python-proc lispy-python-proc-name)
                                       (error (setq-local lispy-python-proc (get-process lispy-python-proc-name)))))
                                   (cl-letf (((symbol-function 'python-shell-send-string)
                                              (lambda (str process) (comint-send-string process (format "exec(%s)\n" (python-shell--encode-string str))))))
                                     (python-shell-send-string-no-output python-shell-eval-setup-code lispy-python-proc)
                                     (python-shell-send-string-no-output python-shell-eval-file-setup-code lispy-python-proc))
                                   (lispy-python-middleware-reload)))))
;; NOTE: https://github.com/abo-abo/lispy/issues/509
#+end_src
** Sql
#+begin_src emacs-lisp :tangle yes
(after! sql
  (set-formatter! 'pg_format "pg_format" :modes 'sql-mode)
  ;; NOTE TEMP: https://github.com/doomemacs/doomemacs/issues/6936
  (puthash 'pg_format "pg_format" format-all--executable-table)
  (puthash 'sqlformat nil format-all--executable-table))
#+end_src

** Tailwind
#+begin_src emacs-lisp :tangle no
(defun fanshi/tailwind-rainbow-config ()
    (when (and (stringp buffer-file-name)
               (string-match "/tailwind\\.config\\.\\(js\\|ts\\)\\'"  buffer-file-name))
      (rainbow-mode)))
(add-hook 'rjsx-mode-hook 'fanshi/tailwind-rainbow-config)
(use-package! lsp-tailwindcss :init (setq lsp-tailwindcss-add-on-mode t))
(after! lsp-tailwindcss
  (if-let (client (gethash 'tailwindcss lsp-clients))
      (setf (lsp--client-new-connection client) (lsp-stdio-connection '("tailwindcss-language-server" "--stdio")))
      (lsp-register-client client))
  (lsp-dependency 'tailwindcss-language-server '((:system "tailwindcss-language-server"))))
#+end_src

** Lispy For Cider
#+begin_src emacs-lisp :tangle no
(use-package! lispy
  :init (setq lispy-compat '(edebug cider)))
#+end_src

** Astro
#+begin_src emacs-lisp :tangle no
(after! format-all
  (add-to-list 'auto-mode-alist '("\\.astro\\'" .
                                  (lambda ()
                                   (rjsx-mode)
                                   (lsp!)
                                   (setq-local +format-with-lsp nil
                                               +format-with 'prettier-astro
                                               ;; NOTE: class instead of className
                                               emmet-jsx-major-modes (remove 'rjsx-mode emmet-jsx-major-modes)))))
  (set-formatter! 'prettier-astro '("prettier" "--parser=astro" ("--plugin-search-dir=%s" (projectile-project-root))) :modes '((rxjs-mode ".astro")))
  ;; NOTE TEMP: https://github.com/doomemacs/doomemacs/issues/6936
  (puthash 'prettier-astro "prettier" format-all--executable-table))
#+end_src

** Wasp Mode
#+begin_src emacs-lisp :tangle no
(use-package! wasp-mode :mode "\\.wasp\\'")
#+end_src

* LSP
** Tweak File Watchers
*** don't watch nix materializtion and golden files for haskell
#+begin_src emacs-lisp :tangle yes
(after! lsp-mode
  (setq! lsp-file-watch-ignored-directories
         (append lsp-file-watch-ignored-directories '("[/\\\\]materialized\\'"
                                                      ;; NOTE: we don't set up lsp for nix, so probably fine for now
                                                      "[/\\\\]nix\\'"
                                                      "[/\\\\]spec\\'"
                                                      "[/\\\\]golden\\'"
                                                      "[/\\\\]\\.postgres\\'"))))
#+end_src

*** don't watch gitignore
- https://github.com/emacs-lsp/lsp-mode/issues/713#issuecomment-985653873
- edit :: bad for performance, emacs stuck to wait for the command to run, may be make it async? disable for now.
#+begin_src emacs-lisp :tangle no
(after! lsp-mode
  (defun ++git-ignore-p (path)
    (let* (           ; trailing / breaks git check-ignore if path is a symlink:
           (path (directory-file-name path))
           (default-directory (file-name-directory path))
           (relpath (file-name-nondirectory path))
           (cmd (format "git check-ignore '%s'" relpath))
           (status (call-process-shell-command cmd)))
      (eq status 0)))

  (defun ++lsp--path-is-watchable-directory-a
      (fn path dir ignored-directories)
    (and (not (++git-ignore-p (f-join dir path)))
         (funcall fn path dir ignored-directories)))

  (advice-add 'lsp--path-is-watchable-directory
              :around #'++lsp--path-is-watchable-directory-a))
#+end_src

* PDF View
#+begin_src emacs-lisp :tangle yes
(after! pdf-view
  (setq! pdf-tools-installer-os "nixos")
  (setq! pdf-view-midnight-colors '("#ABB2BF" . "#282C35"))
  (add-hook! pdf-tools-enabled #'pdf-view-midnight-minor-mode)
  ;; (add-hook! pdf-tools-enabled #'hide-mode-line-mode)
  )
#+end_src

* Vterm Use Fish
#+begin_src emacs-lisp :tangle yes
;; use 'vterm' with 'fish'
(after! vterm (setq! vterm-shell "~/.nix-profile/bin/fish"))
#+end_src

* Not so long
*** Problem
The so-long.el is for text files with long lines (think of e.g. minified JavaScript or CSS libs).
No point to enable it globally and moreover it broke some ux for me like the following:
#+begin_src emacs-lisp :tangle no
(helpful-callable #'org-toggle-link-display)
#+end_src
Because so-long-mode triggered on the source elisp file, the "coding: utf-8" local variable doesn't work and hence asking me for the coding system.
*** So...
#+begin_src emacs-lisp :tangle yes
(global-so-long-mode -1)
#+end_src
* Use Dired Narrow
#+begin_src emacs-lisp :tangle yes
(use-package! dired-narrow
  :commands (dired-narrow-fuzzy)
  :init
  (map! :map dired-mode-map :n "/" #'dired-narrow-fuzzy))
#+end_src

* Auto Format Modes
#+begin_src emacs-lisp :tangle yes
;; (setq! +format-on-save-enabled-modes '(haskell-mode nix-mode haskell-cabal-mode sql-mode ))
(setq! +format-on-save-enabled-modes
       '(not emacs-lisp-mode  ; elisp's mechanisms are good enough
            tex-mode         ; latexindent is broken
            latex-mode
            org-msg-edit-mode))  ; doesn't need a formatter
;; NOTE: https://github.com/doomemacs/doomemacs/issues/6936#issuecomment-1366030502
(after! format-all (advice-remove 'format-all-buffer--from-hook '+format--all-buffer-from-hook-a))
(after! (:and format-all envrc)
  ;; TEMP FIXME https://github.com/doomemacs/doomemacs/issues/3900
  (advice-add 'format-all-buffer :around #'envrc-propagate-environment)
  (advice-add 'format-all-buffer--from-hook :around #'envrc-propagate-environment))
#+end_src

* fanshi/ediff-init-and-example
- ref ::  https://github.com/doomemacs/doomemacs/issues/581#issuecomment-645448095
#+begin_src emacs-lisp :tangle yes
(defun fanshi/ediff-init-and-example ()
  "ediff the current `init.el' with the example in doom-emacs-dir"
  (interactive)
  (ediff-files (concat doom-private-dir "init.el")
               (concat doom-emacs-dir "templates/init.example.el")))
(define-key! help-map
  "di"   #'fanshi/ediff-init-and-example
  )
#+end_src
* Magit Forge
#+begin_src emacs-lisp :tangle no
(after! forge (setq! forge-owned-accounts '(("fanshi1028"))))
#+end_src

* Email
#+BEGIN_SRC elisp :tangle no
(after! notmuch (setq! +notmuch-sync-backend 'mbsync))
;; (setq +notmuch-sync-backend 'mbsync-xdg)
#+END_SRC

#+BEGIN_SRC elisp :tangle no
(after! sendmail (setq! sendmail-program (executable-find "msmtp")))
#+END_SRC

* Elfeeds
#+begin_src emacs-lisp :tangle no
(after! elfeed
  (setq! elfeed-feeds
         '(("http://feeds.feedburner.com/incodeblog" blog haskell)
           ("https://noonker.github.io/index.xml" blog tech)
           ("https://mollermara.com/rss.xml" emacs blog stat)
           ("https://notxor.nueva-actitud.org/rss.xml" es blog)
           ("http://pragmaticemacs.com/feed/" blog emacs)
           ("https://blog.thomasheartman.com/rss.xml" blog emacs haskell)
           ("https://medium.com/feed/@mojia" en blog)
           ("https://mac-ra.com/feed/atom/" jp blog)
           ("https://www.parsonsmatt.org/feed.xml" en haskell blog)
           ("https://www.fosskers.ca/jp/rss" jp haskell blog)
           ("https://www.fosskers.ca/en/rss" en haskell blog)
           ("https://lexi-lambda.github.io/feeds/all.atom.xml" en haskell blog)
           ("https://kseo.github.io/atom.xml" en haskell blog)
           ("https://sandymaguire.me/atom.xml" en blog)
           ("https://reasonablypolymorphic.com/atom.xml" en haskell blog)
           ("https://www.youtube.com/feeds/videos.xml?channel_id=UCXf8jlTSP9kp6g4ROCfgvbQ" youtube )
           ;; ("https://dev.to/bradparker" en haskell blog)
           ("https://www.williamyaoh.com/feed.atom" en haskell blog)
           ;; ("https://www.reddit.com/r/haskell/top/.rss?t=week" top haskell reddit)
           ;; ("https://www.reddit.com/r/hongkong/top/.rss?t=week" top hongkong reddit)
           )
         elfeed-search-filter "+unread @1-month-ago"))
#+end_src

* Plantuml
#+begin_src emacs-lisp :tangle yes
(after! plantuml-mode (setq! plantuml-default-exec-mode 'executable))
#+end_src

* Use Gif Screencast
#+begin_src emacs-lisp :tangle no
(use-package! gif-screencast
  :commands (gif-screencast-start-or-stop)
  :init (setq gif-screencast-args '("-x")
              gif-screencast-capture-format "ppm"
              gif-screencast-cropping-program "" ;; NOTE diable cropping, seems its only crop part of the emacs screen fro some reason
              )
  :bind ("<f12>" . gif-screencast-start-or-stop))
#+end_src

* Use Nov Mode
#+begin_src emacs-lisp :tangle yes
(use-package! nov :mode ("\\.\\(epub\\|mobi\\)\\'" . nov-mode))
#+end_src

* Use Keycast
#+begin_src emacs-lisp :tangle no
(use-package! keycast
  :defer
  :config (define-minor-mode keycast-mode
            "Show current command and its key binding in the mode line."
            :global t
            (if keycast-mode
                (add-hook 'pre-command-hook 'keycast-mode-line-update t) (remove-hook 'pre-command-hook 'keycast-mode-line-update)))
  (add-to-list 'global-mode-string '("" mode-line-keycast)))
#+end_src

* Use Scala
#+begin_src emacs-lisp :tangle yes
(push '("\\.sc\\'" . scala-mode) auto-mode-alist)
(use-package! sbt-mode :disabled)
#+end_src

** Use Ammonite Term Repl
#+begin_src emacs-lisp :tangle no
(use-package! ammonite-term-repl
  :after scala-mode
  :config (progn
            (setq ammonite-term-repl-auto-config-mill-project nil)
            (setq ammonite-term-repl-auto-detect-predef-file nil)
            ;; (setq ammonite-term-repl-program-args '("-s" "--no-default-predef"))
            (set-repl-handler! 'scala-mode #'run-ammonite :persist t)))
#+end_src

* Custom
#+begin_src emacs-lisp :tangle yes
;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
#+end_src
